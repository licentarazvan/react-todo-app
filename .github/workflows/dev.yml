name: dev

on:
  push:
    branches:
      - master

jobs:
  build-dev:
    name: Build app dev
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Packages
        run:
          npm install
      - name: Build application
        run:
          npm run build
      - uses: actions/cache@v2
        id: save-build
        with:
          path: ./*
          key: ${{ github.sha }}
      - name: Read app version
        run: |
          app_version=$(cat package.json | jq -r '.version'); echo "app_version=$app_version" >> $GITHUB_ENV
      - name: print app version
        run:
          echo $app_version
      - name: Create tag and push
        if:  ${{ ! contains(env.app_version, 'dev') }}
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          script: |
            await github.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/${{ env.app_version }}",
              sha: context.sha
            })
  deploy-dev:
    name: Deploy app dev
    runs-on: ubuntu-latest
    needs: build-dev
    environment: dev
    env:
        DEV_CLOUDFRONT_ID: ${{ secrets.DEV_CLOUDFRONT_ID }}
        DEV_S3_BUCKET: ${{ secrets.DEV_S3_BUCKET }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-1
      - name: Configure AWS Cloudfront
        run:
          aws configure set preview.cloudfront true
      - uses: actions/cache@v2
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}
      - name: Deploy app
        run:
          npm run deploy-dev
      - name: Invalidate cache
        run:
          npm run invalidate-cache-dev
