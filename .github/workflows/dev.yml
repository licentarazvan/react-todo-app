name: dev

on:
  push:
    branches:
      - master

jobs:
  build-dev:
    name: Build app dev
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Packages
        run:
          npm install
      - name: Build application
        run:
          npm run build
      - uses: actions/cache@v2
        id: save-build
        with:
          path: ./*
          key: ${{ github.sha }}
  deploy-dev:
    name: Deploy app dev
    runs-on: ubuntu-latest
    needs: build-dev
    environment: dev
    env:
        DEV_CLOUDFRONT_ID: ${{ secrets.DEV_CLOUDFRONT_ID }}
        DEV_S3_BUCKET: ${{ secrets.DEV_S3_BUCKET }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-1
      - name: Configure AWS Cloudfront
        run:
          aws configure set preview.cloudfront true
      - name: Read app version
        run: |
          if [ -f package.json ]; then
            echo "export app_version=$(
            python - \<< EOF
            import json
            with open('package.json', 'r') as f:
                datastore = json.load(f)
            print(datastore["version"])
            EOF
            )" >> $GITHUB_ENV
            exit 0
          fi
     - name: print app version
       run:
         echo $app_version
     - uses: actions/cache@v2
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}
      - name: Deploy app
        run:
          npm run deploy-dev
      - name: Invalidate cache
        run:
          npm run invalidate-cache-dev
      - name: Create release tag if needed
        run:
          if [[ $app_version != *-dev ]]; then
            git tag -a v$app_version -m "Release v$app_version"
            git push origin v$app_version
          fi
